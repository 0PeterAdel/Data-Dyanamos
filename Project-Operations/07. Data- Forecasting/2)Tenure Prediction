{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMJIMXriUfh9jcDPNDrcVhw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"UaZEOE0wb7bM"},"outputs":[],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n","from sklearn.metrics import accuracy_score, mean_absolute_error\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","df = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/data/HrData.xlsx')\n","\n","# Display first few rows to understand the structure\n","display(df.head())\n","\n","# Identify relevant columns for attrition prediction\n","relevant_columns = ['Attrition', 'JobSatisfaction', 'Education', 'PerformanceRating']\n","df_attrition = df[relevant_columns]\n","\n","# Encode categorical values if necessary\n","label_enc = LabelEncoder()\n","df_attrition['Attrition'] = label_enc.fit_transform(df_attrition['Attrition'])  # Convert 'Yes'/'No' to 1/0\n","\n","# Split data into features and target for attrition prediction\n","X_attrition = df_attrition.drop(columns=['Attrition'])\n","y_attrition = df_attrition['Attrition']\n","\n","# Train/Test Split for attrition\n","X_train_attrition, X_test_attrition, y_train_attrition, y_test_attrition = train_test_split(X_attrition, y_attrition, test_size=0.2, random_state=42)\n","\n","# Train a model (Random Forest Classifier) for attrition\n","model_attrition = RandomForestClassifier(n_estimators=100, random_state=42)\n","model_attrition.fit(X_train_attrition, y_train_attrition)\n","\n","# Predict on test data for attrition\n","y_pred_attrition = model_attrition.predict(X_test_attrition)\n","\n","# Check accuracy for attrition prediction\n","accuracy_attrition = accuracy_score(y_test_attrition, y_pred_attrition)\n","print(f\"Attrition Model Accuracy: {accuracy_attrition:.2f}\")\n","\n","# Predict employees likely to leave\n","df_attrition['Predicted_Attrition'] = model_attrition.predict(X_attrition)\n","likely_to_leave = df_attrition[df_attrition['Predicted_Attrition'] == 1]\n","\n","# Display employees likely to leave\n","display(likely_to_leave)\n","\n","# Identify relevant columns for tenure prediction\n","tenure_columns = ['Tenure', 'Age', 'JobSatisfaction', 'Education', 'PerformanceRating']\n","df_tenure = df[tenure_columns]\n","\n","# Drop rows with missing values\n","df_tenure = df_tenure.dropna()\n","\n","# Split data into features and target for tenure prediction\n","X_tenure = df_tenure.drop(columns=['Tenure'])\n","y_tenure = df_tenure['Tenure']\n","\n","# Train/Test Split for tenure prediction\n","X_train_tenure, X_test_tenure, y_train_tenure, y_test_tenure = train_test_split(X_tenure, y_tenure, test_size=0.2, random_state=42)\n","\n","# Train a model (Random Forest Regressor) for tenure prediction\n","model_tenure = RandomForestRegressor(n_estimators=100, random_state=42)\n","model_tenure.fit(X_train_tenure, y_train_tenure)\n","\n","# Predict on test data for tenure\n","y_pred_tenure = model_tenure.predict(X_test_tenure)\n","\n","# Check mean absolute error for tenure prediction\n","mae_tenure = mean_absolute_error(y_test_tenure, y_pred_tenure)\n","print(f\"Tenure Prediction Mean Absolute Error: {mae_tenure:.2f} years\")\n","\n","# Predict expected tenure for all employees\n","df_tenure['Predicted_Tenure'] = model_tenure.predict(X_tenure)\n","\n","# Display employees with predicted tenure\n","display(df_tenure[['Tenure', 'Predicted_Tenure']])\n"]}]}